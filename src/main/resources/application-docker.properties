spring.application.name=PartyOrganizer

# Threads
spring.threads.virtual.enabled=true
spring.task.execution.pool.core-size=${number.of.processors:#{T(java.lang.Runtime).getRuntime().availableProcessors()}}
spring.task.execution.pool.max-size=${number.of.processors:#{T(java.lang.Runtime).getRuntime().availableProcessors() * 2}}

# R2DBC (PostgreSQL rodando na máquina local, acessível pelo container)
spring.r2dbc.url=r2dbc:postgresql://host.docker.internal:5432/party_organizer_db
spring.r2dbc.username=postgres
spring.r2dbc.password=
spring.r2dbc.pool.enabled=true
spring.r2dbc.pool.initial-size=5
spring.r2dbc.pool.max-size=20
spring.r2dbc.pool.validation-query=SELECT 1

# Flyway (também precisa acessar o banco local)
spring.flyway.enabled=true
spring.flyway.url=jdbc:postgresql://host.docker.internal:5432/party_organizer_db
spring.flyway.user=postgres
spring.flyway.password=
spring.flyway.locations=classpath:db/migration

# Redis (usando o serviço do docker-compose)
spring.cache.type=redis
spring.data.redis.host=redis
spring.data.redis.port=6379

# Kafka
spring.kafka.bootstrap-servers=kafka:9092
spring.kafka.consumer.group-id=party-whatsapp
spring.kafka.consumer.auto-offset-reset=earliest
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.value-deserializer=org.apache.kafka.common.serialization.StringDeserializer

# Internacionalização
spring.messages.basename=messages
spring.messages.encoding=UTF-8
